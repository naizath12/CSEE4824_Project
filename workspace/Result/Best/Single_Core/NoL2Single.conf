# SESC configuration file for CSEE W4824 Computer Architecture project,
# modified from cmp.conf, which is contributed by Hou Rui
# Young Jin Yoon <youngjin_at_cs_dot_columbia_dot_edu>
#

# Please do not modify configuration otherwise specified.
##################################################################

##############################
# SYSTEM                     #
##############################

NoMigration    = false
tech           = 32 
pageSize       = 4096
fetchPolicy    = 'outorder'
issueWrongPath = true

technology = 'techParam'


procsPerNode  = 1				# total number of cores, fixed to 1.
								# Do not modify this!

# You can start modifying from the line below.
##################################################################

#1. multicore configuration.

cpucore[0] = 'SmallCore'			# e.g. if you want to use 1 large-core with 3 small-core:
										# cpucore[0] = 'LargeCore'
										# cpucore[1:3] = 'SmallCore' 

#2. Issue width for each core types (i.e. small, mid, and large.)
issueLarge         = 1     	# large-processor issue width 
issueMid           = 1     	# mid-processor issue width  
issueSmall         = 3     	# small-processor issue width 

#3. IL1 & DL1 configuration for large cores
LargeIL1CacheSize  	= 32768
LargeIL1Assoc		= 8
LargeIL1AccessTime	= 2		# Need to be calculated by CACTI

LargeDL1CacheSize  	= 32768
LargeDL1Assoc		= 8
LargeDL1AccessTime	= 2		# Need to be calculated by CACTI


#4. IL1 & DL1 configuration for mid cores
MidIL1CacheSize  	= 32768
MidIL1Assoc			= 8
MidIL1AccessTime	= 2			# Need to be calculated by CACTI

MidDL1CacheSize  	= 32768
MidDL1Assoc			= 8
MidDL1AccessTime	= 2			# Need to be calculated by CACTI

#5. IL1 & DL1 configuration for small cores
SmallIL1CacheSize  	= 32768
SmallIL1Assoc		= 8
SmallIL1AccessTime	= 2		# Need to be calculated by CACTI

SmallDL1CacheSize  	= 32768
SmallDL1Assoc		= 8
SmallDL1AccessTime	= 2		# Need to be calculated by CACTI

#6. Common Configuration for caches
CacheBlockSize		= 32  

#7. Clock frequency configuration
Frequency = 1900000000 			# 100Mhz

#8. Core type inorder/out-of-order configuration 
[LargeCore]
inorder         = false			# does the core execute in order?

[MidCore]
inorder         = false			# does the core execute in order?

[SmallCore]
inorder         = false			# does the core execute in order?


# Please do not modify below this line
##################################################################


#additional configuration for large core.
[LargeCore] 
enableICache    = true  			# using separate caches for data and inst?
dataSource      = "DL1CacheLarge DL1Large" 	# the first level of cache hierarchy for data.
instrSource     = "IL1CacheLarge IL1Large"	# the first level of cache hierarchy for instructions.

#additional configuration for mid core.
[MidCore]
enableICache    = true 				# using separate caches for data and inst?
dataSource      = "DL1CacheMid DL1Mid"	# the first level of cache hierarchy for data.
instrSource     = "IL1CacheMid IL1Mid"	# the first level of cache hierarchy for instructions.

#additional configuration for small core.
[SmallCore]
enableICache    = true 				# using separate caches for data and inst?
dataSource      = "DL1CacheSmall DL1Small"	# the first level of cache hierarchy for data.
instrSource     = "IL1CacheSmall IL1Small"	# the first level of cache hierarchy for instruction.


###############################
# clock-panalyzer input       #
###############################
[techParam]
clockTreeStyle = 1    # 1 for Htree or 2 for balHtree
tech       = 32     # nm
frequency  = $(Frequency)      # Hz
skewBudget = 20      # in ps
areaOfChip = 200    # in mm^2
loadInClockNode = 20    # in pF
optimalNumberOfBuffer = 3

##############################
# PROCESSORS' CONFIGURATION  #
##############################

### Large core configuration ###
[LargeCore]
frequency       = $(Frequency)
areaFactor      = ($(issueLarge)*$(issueLarge)+0.1)/16  # Area compared to Alpha264 EV6
fetchWidth      = $(issueLarge)
instQueueSize   = 2*$(issueLarge)
issueWidth      = $(issueLarge)
retireWidth     = $(issueLarge)+1
decodeDelay     = 6
renameDelay     = 3
wakeupDelay     = 6                 # -> 6+3+6+1+1=17 branch mispred. penalty
maxBranches     = 16*$(issueLarge)
bb4Cycle        = 1
maxIRequests    = 4
interClusterLat = 2
intraClusterLat = 1
cluster[0]      = 'FXClusterIssueLarge'
cluster[1]      = 'FPClusterIssueLarge'
stForwardDelay  = 2 
maxLoads        = 14*$(issueLarge)+16
maxStores       = 10*$(issueLarge)+16
regFileDelay    = 3
robSize         = 36*$(issueLarge)+32
intRegs         = 32+36*$(issueLarge)
fpRegs          = 32+36*$(issueLarge)
bpred           = 'BPredIssueX'
dtlb            = 'FXDTLBLarge'
itlb            = 'FXITLBLarge'
OSType          = 'dummy'


# integer functional units

[FXClusterIssueLarge]
winSize    = 12*$(issueLarge)+32 # number of entries in window
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 3
schedDelay    = 1 # Minimum latency like a intraClusterLat
iStoreLat  = 1
iStoreUnit = 'LDSTIssueLarge'
iLoadLat   = 1
iLoadUnit  = 'LDSTIssueLarge'
iALULat    = 1
iALUUnit   = 'ALUIssueLarge'
iBJLat     = 1
iBJUnit    = 'ALUIssueLarge'
iDivLat    = 12
iDivUnit   = 'ALUIssueLarge'
iMultLat   = 4
iMultUnit  = 'ALUIssueLarge'

[LDSTIssueLarge]
Num = $(issueLarge)
Occ = 1

[ALUIssueLarge]
Num = $(issueLarge)
Occ = 1

# floating point functional units

[FPClusterIssueLarge]
winSize    = 8*$(issueLarge)
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 3
schedDelay    = 1 # Minimum latency like a intraClusterLat
fpALULat   = 1
fpALUUnit  = 'FPIssueLarge'
fpMultLat  = 2
fpMultUnit = 'FPIssueLarge'
fpDivLat   = 10
fpDivUnit  = 'FPIssueLarge'

[FPIssueLarge]
Num = $(issueLarge)
Occ = 1

# memory translation mechanism
[FXDTLBLarge]
size       = 64*8
assoc      = 4
bsize      = 8
deviceType = 'cache'
numPorts   = 2
replPolicy = 'LRU'

[FXITLBLarge]
size       = 64*8
assoc      = 4
bsize      = 8
deviceType = 'cache'
numPorts   = 2
replPolicy = 'LRU'


### Mid core configuration ###
[MidCore]
frequency       = $(Frequency)
areaFactor      = ($(issueMid)*$(issueMid)+0.1)/16  # Area compared to Alpha264 EV6
fetchWidth      = $(issueMid)
instQueueSize   = 2*$(issueMid)
issueWidth      = $(issueMid)
retireWidth     = $(issueMid)+1
decodeDelay     = 6
renameDelay     = 3
wakeupDelay     = 6                 # -> 6+3+6+1+1=17 branch mispred. penalty
maxBranches     = 8*$(issueMid)
bb4Cycle        = 1
maxIRequests    = 4
interClusterLat = 2
intraClusterLat = 1
cluster[0]      = 'FXClusterIssueMid'
cluster[1]      = 'FPClusterIssueMid'
stForwardDelay  = 2 
maxLoads        = 6*$(issueMid)+16
maxStores       = 4*$(issueMid)+16
regFileDelay    = 3
robSize         = 18*$(issueMid)+32
intRegs         = 32+18*$(issueMid)
fpRegs          = 32+18*$(issueMid)
bpred           = 'BPredIssueX'
dtlb            = 'FXDTLBMid'
itlb            = 'FXITLBMid'
OSType          = 'dummy'


# integer functional units

[FXClusterIssueMid]
winSize    = 6*$(issueMid)+32 # number of entries in window
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 3
schedDelay    = 1 # Minimum latency like a intraClusterLat
iStoreLat  = 1
iStoreUnit = 'LDSTIssueMid'
iLoadLat   = 1
iLoadUnit  = 'LDSTIssueMid'
iALULat    = 1
iALUUnit   = 'ALUIssueMid'
iBJLat     = 1
iBJUnit    = 'ALUIssueMid'
iDivLat    = 12
iDivUnit   = 'ALUIssueMid'
iMultLat   = 4
iMultUnit  = 'ALUIssueMid'

[LDSTIssueMid]
Num = $(issueMid)/2+1
Occ = 1

[ALUIssueMid]
Num = $(issueMid)/2+1
Occ = 1

# floating point functional units

[FPClusterIssueMid]
winSize    = 4*$(issueMid)
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 3
schedDelay    = 1 # Minimum latency like a intraClusterLat
fpALULat   = 1
fpALUUnit  = 'FPIssueMid'
fpMultLat  = 2
fpMultUnit = 'FPIssueMid'
fpDivLat   = 10
fpDivUnit  = 'FPIssueMid'

[FPIssueMid]
Num = $(issueMid)/2+1
Occ = 1

# memory translation mechanism
[FXDTLBMid]
size       = 64*8
assoc      = 4
bsize      = 8
deviceType = 'cache'
numPorts   = 2
replPolicy = 'LRU'

[FXITLBMid]
size       = 64*8
assoc      = 4
bsize      = 8
deviceType = 'cache'
numPorts   = 2
replPolicy = 'LRU'


### Small core configuration ###
[SmallCore]
frequency       = $(Frequency) 
areaFactor      = ($(issueSmall)*$(issueSmall)+0.1)/16  # Area compared to Alpha264 EV6
fetchWidth      = $(issueSmall)
instQueueSize   = 2*$(issueSmall)
issueWidth      = $(issueSmall)
retireWidth     = $(issueSmall)+1
decodeDelay     = 6
renameDelay     = 3
wakeupDelay     = 6                 # -> 6+3+6+1+1=17 branch mispred. penalty
maxBranches     = 4*$(issueSmall)
bb4Cycle        = 1
maxIRequests    = 4
interClusterLat = 2
intraClusterLat = 1
cluster[0]      = 'FXClusterIssueSmall'
cluster[1]      = 'FPClusterIssueSmall'
stForwardDelay  = 2 
maxLoads        = 4*$(issueSmall)+16
maxStores       = 2*$(issueSmall)+16
regFileDelay    = 3
robSize         = 9*$(issueSmall)+32
intRegs         = 32+9*$(issueSmall)
fpRegs          = 32+9*$(issueSmall)
bpred           = 'BPredIssueX'
dtlb            = 'FXDTLBSmall'
itlb            = 'FXITLBSmall'
OSType          = 'dummy'


# integer functional units

[FXClusterIssueSmall]
winSize    = 4*$(issueSmall)+32 # number of entries in window
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 3
schedDelay    = 1 # Minimum latency like a intraClusterLat
iStoreLat  = 1
iStoreUnit = 'LDSTIssueSmall'
iLoadLat   = 1
iLoadUnit  = 'LDSTIssueSmall'
iALULat    = 1
iALUUnit   = 'ALUIssueSmall'
iBJLat     = 1
iBJUnit    = 'ALUIssueSmall'
iDivLat    = 12
iDivUnit   = 'ALUIssueSmall'
iMultLat   = 4
iMultUnit  = 'ALUIssueSmall'

[LDSTIssueSmall]
Num = 1
Occ = 1

[ALUIssueSmall]
Num = 1
Occ = 1

# floating point functional units

[FPClusterIssueSmall]
winSize    = 2*$(issueSmall)
recycleAt  = 'Execute'
schedNumPorts = 4
schedPortOccp = 1
wakeUpNumPorts= 4
wakeUpPortOccp= 1
wakeupDelay   = 3
schedDelay    = 1 # Minimum latency like a intraClusterLat
fpALULat   = 1
fpALUUnit  = 'FPIssueSmall'
fpMultLat  = 2
fpMultUnit = 'FPIssueSmall'
fpDivLat   = 10
fpDivUnit  = 'FPIssueSmall'

[FPIssueSmall]
Num = 1
Occ = 1

# memory translation mechanism
[FXDTLBSmall]
size       = 64*8
assoc      = 4
bsize      = 8
deviceType = 'cache'
numPorts   = 2
replPolicy = 'LRU'

[FXITLBSmall]
size       = 64*8
assoc      = 4
bsize      = 8
deviceType = 'cache'
numPorts   = 2
replPolicy = 'LRU'

# branch prediction mechanism

[BPredIssueX]
type          = "hybrid"
BTACDelay     = 0
l1size        = 1
l2size        = 16*1024
l2Bits        = 1
historySize   = 11
Metasize      = 16*1024
MetaBits      = 2
localSize     = 16*1024
localBits     = 2
btbSize       = 2048
btbBsize      = 1
btbAssoc      = 2
btbReplPolicy = 'LRU'
btbHistory    = 0
rasSize       = 32

##############################
# MEMORY SUBSYSTEM           #
##############################

# instruction source
[IL1CacheLarge]
deviceType    = 'icache'
size          = $(LargeIL1CacheSize)
assoc         = $(LargeIL1Assoc)
bsize         = $(CacheBlockSize)
writePolicy   = 'WT'
replPolicy    = 'LRU'
numPorts      = 2
portOccp      = 1
hitDelay      = $(LargeIL1AccessTime) 
missDelay     = 1                # this number is added to the hitDelay
MSHR          = "iMSHRLarge"
lowerLevel    = "MemoryIBus memIBus shared"

[iMSHRLarge]
type = 'single'
size = 32
bsize = $(CacheBlockSize)

[IL1CacheMid]
deviceType    = 'icache'
size          = $(MidIL1CacheSize)
assoc         = $(MidIL1Assoc)
bsize         = $(CacheBlockSize)
writePolicy   = 'WT'
replPolicy    = 'LRU'
numPorts      = 2
portOccp      = 1
hitDelay      = $(MidIL1AccessTime) 
missDelay     = 1                # this number is added to the hitDelay
MSHR          = "iMSHRMid"
lowerLevel    = "MemoryIBus memIBus shared"

[iMSHRMid]
type = 'single'
size = 32
bsize = $(CacheBlockSize)

[IL1CacheSmall]
deviceType    = 'icache'
size          = $(SmallIL1CacheSize)
assoc         = $(SmallIL1Assoc)
bsize         = $(CacheBlockSize)
writePolicy   = 'WT'
replPolicy    = 'LRU'
numPorts      = 2
portOccp      = 1
hitDelay      = $(SmallIL1AccessTime) 
missDelay     = 1                # this number is added to the hitDelay
MSHR          = "iMSHRSmall"
lowerLevel    = "MemoryIBus memIBus shared"

[iMSHRSmall]
type = 'single'
size = 32
bsize = $(CacheBlockSize)

# data source
[DL1CacheLarge]
deviceType    = 'cache'
size          = $(LargeDL1CacheSize)
assoc         = $(LargeDL1Assoc)
bsize         = $(CacheBlockSize)
writePolicy   = 'WB'
replPolicy    = 'LRU'
numPorts      = 2                # one for L1, one for snooping
portOccp      = 2
hitDelay      = $(LargeDL1AccessTime)
missDelay     = $(LargeDL1AccessTime)+1               # exclusive, i.e., not added to hitDelay
displNotify   = false
MSHR          = "dMSHRLarge"
lowerLevel    = "MemoryDBus memDBus shared"

[dMSHRLarge]
type = 'single'
size = 64
bsize = $(CacheBlockSize)

[DL1CacheMid]
deviceType    = 'cache'
size          = $(MidDL1CacheSize)
assoc         = $(MidDL1Assoc)
bsize         = $(CacheBlockSize)
writePolicy   = 'WB'
replPolicy    = 'LRU'
numPorts      = 2                # one for L1, one for snooping
portOccp      = 2
hitDelay      = $(MidDL1AccessTime)
missDelay     = $(MidDL1AccessTime)+1               # exclusive, i.e., not added to hitDelay
displNotify   = false
MSHR          = "dMSHRMid"
lowerLevel    = "MemoryDBus memDBus shared"

[dMSHRMid]
type = 'single'
size = 64
bsize = $(CacheBlockSize)

[DL1CacheSmall]
deviceType    = 'cache'
size          = $(SmallDL1CacheSize)
assoc         = $(SmallDL1Assoc)
bsize         = $(CacheBlockSize)
writePolicy   = 'WB'
replPolicy    = 'LRU'
numPorts      = 2                # one for L1, one for snooping
portOccp      = 2
hitDelay      = $(SmallDL1AccessTime)
missDelay     = $(SmallDL1AccessTime)+1 # exclusive, i.e., not added to hitDelay
displNotify   = false
MSHR          = "dMSHRSmall"
lowerLevel    = "MemoryDBus memDBus shared"

[dMSHRSmall]
type = 'single'
size = 64
bsize = $(CacheBlockSize)

# Off-chip configurations
[MemoryIBus]
deviceType = 'bus'
numPorts   = 1
portOccp   = 1             # Fully Pipelined.
delay      = ($(Frequency) / 3200000000) # 3.2Ghz bus, from Intel QuickPath arch.  
lowerLevel = "Memory memory"

[MemoryDBus]
deviceType = 'bus'
numPorts   = 1
portOccp   = 1             # Fully Pipelined.
delay      = ($(Frequency) / 3200000000) # 3.2Ghz bus, from Intel QuickPath arch.  
lowerLevel = "Memory memory"

[Memory]
deviceType    = 'niceCache'
size          = 64
assoc         = 1
bsize         = 64
writePolicy   = 'WB'
replPolicy    = 'LRU'
numPorts      = 1                
portOccp      = 1				 # Fully Pipelined
hitDelay      = $(Frequency) / 100000000	# Assuming 10 ns Memory 	
missDelay      = $(Frequency) / 100000000	# Assuming 10 ns Memory 	
MSHR          = NoMSHR
lowerLevel    = 'voidDevice'

[NoMSHR]
type = 'none'
size = 128
bsize = 64

[voidDevice]
deviceType    = 'void'


